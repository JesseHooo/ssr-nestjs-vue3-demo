"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientWebpack = void 0;
const ssr_common_utils_1 = require("ssr-common-utils");
const base_1 = require("./base");
const safePostCssParser = require('postcss-safe-parser');
const loadModule = ssr_common_utils_1.loadModuleFromFramework;
const getClientWebpack = (chain) => {
    const { isDev, chunkName, getOutput, chainClientConfig } = (0, ssr_common_utils_1.loadConfig)();
    const shouldUseSourceMap = isDev || Boolean(process.env.GENERATE_SOURCEMAP);
    const publicPath = (0, ssr_common_utils_1.getOutputPublicPath)();
    (0, base_1.getBaseConfig)(chain, false);
    const buildConfig = (0, ssr_common_utils_1.getBuildConfig)();
    chain.entry(chunkName)
        .add(require.resolve('../entry/client-entry'))
        .end()
        .output
        .path(getOutput().clientOutPut)
        .filename(buildConfig.jsBuldConfig.fileName)
        .chunkFilename(buildConfig.jsBuldConfig.chunkFileName)
        .publicPath(publicPath)
        .end();
    chain.optimization
        .runtimeChunk(true)
        .splitChunks((0, ssr_common_utils_1.getSplitChunksOptions)(ssr_common_utils_1.asyncChunkMap))
        .when(!isDev, optimization => {
        optimization.minimizer('terser')
            .use(loadModule('terser-webpack-plugin'), [(0, ssr_common_utils_1.terserConfig)()]);
        optimization.minimizer('optimize-css').use(loadModule('optimize-css-assets-webpack-plugin'), [{
                cssProcessorOptions: {
                    parser: safePostCssParser,
                    map: shouldUseSourceMap ? {
                        inline: false,
                        annotation: true
                    } : false
                }
            }]);
    });
    chain.plugin('manifest').use(loadModule('webpack-manifest-plugin'), [{
            fileName: 'asset-manifest.json'
        }]);
    chainClientConfig(chain); // 合并用户自定义配置
    return chain.toConfig();
};
exports.getClientWebpack = getClientWebpack;
//# sourceMappingURL=client.js.map