"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBaseConfig = void 0;
const path_1 = require("path");
const ssr_common_utils_1 = require("ssr-common-utils");
const webpack = require("ssr-webpack4");
const MiniCssExtractPlugin = require((0, ssr_common_utils_1.loadModuleFromFramework)('ssr-mini-css-extract-plugin'));
const WebpackBar = require('webpackbar');
const loadModule = ssr_common_utils_1.loadModuleFromFramework;
const getBaseConfig = (chain, isServer) => {
    var _a, _b;
    const config = (0, ssr_common_utils_1.loadConfig)();
    const { moduleFileExtensions, chainBaseConfig, locale, ssrVueLoaderOptions, csrVueLoaderOptions, alias, define } = config;
    let vueLoaderOptions = {
        babelParserPlugins: ['jsx', 'classProperties', 'decorators-legacy'],
        compilerOptions: {
            isCustomElement: (tag) => tag.includes('micro')
        }
    };
    if (isServer && ssrVueLoaderOptions) {
        vueLoaderOptions = {
            vueLoaderOptions,
            ...ssrVueLoaderOptions
        };
    }
    if (!isServer && csrVueLoaderOptions) {
        vueLoaderOptions = {
            vueLoaderOptions,
            ...csrVueLoaderOptions
        };
    }
    const mode = process.env.NODE_ENV;
    chain.resolve
        .extensions
        .merge(['.mjs', '.js', '.jsx', '.vue', '.json', '.wasm'])
        .end();
    chain.module
        .noParse(/^(vue|vue-router|vuex)$/);
    chain.mode(mode);
    chain.module.strictExportPresence(true);
    chain
        .resolve
        .modules
        .add('node_modules')
        .add((0, path_1.join)((0, ssr_common_utils_1.getCwd)(), './node_modules'))
        .end()
        .extensions.merge(moduleFileExtensions)
        .end();
    alias && Object.keys(alias).forEach(item => {
        chain.resolve.alias
            .set(item, alias[item]);
    });
    chain.resolve.alias
        .set('pinia', (0, ssr_common_utils_1.loadModuleFromFramework)('pinia'));
    (0, ssr_common_utils_1.addCommonChain)(chain, isServer);
    chain.module
        .rule('vue')
        .test(/\.vue$/)
        .use('vue-loader')
        .loader(loadModule('vue-loader')).options(vueLoaderOptions)
        .end();
    chain
        .plugin('vue-loader')
        .use(require(loadModule('vue-loader')).VueLoaderPlugin)
        .end();
    (locale === null || locale === void 0 ? void 0 : locale.enable) && chain.module
        .rule('i18n-resource')
        .test(/\.(json5?|ya?ml)$/)
        .include.add((0, path_1.join)((0, ssr_common_utils_1.getCwd)(), './web/locales')).end()
        .type('javascript/auto')
        .use('i18n-resource')
        .loader('@intlify/vue-i18n-loader')
        .end();
    // block support
    (locale === null || locale === void 0 ? void 0 : locale.enable) && chain.module
        .rule('i18n')
        .resourceQuery(/blockType=i18n/)
        .type('javascript/auto')
        .use('i18n')
        .loader('@intlify/vue-i18n-loader')
        .end();
    (0, ssr_common_utils_1.setStyle)(chain, /\.css$/, {
        rule: 'css',
        importLoaders: 1,
        isServer
    }); // 设置css
    (0, ssr_common_utils_1.setStyle)(chain, /\.less$/, {
        rule: 'less',
        loader: 'less-loader',
        importLoaders: 2,
        isServer
    });
    chain.plugin('minify-css').use(MiniCssExtractPlugin, (0, ssr_common_utils_1.getBuildConfig)().cssBuildConfig);
    chain.plugin('webpackBar').use(new WebpackBar({
        name: isServer ? 'server' : 'client',
        color: isServer ? '#f173ac' : '#45b97c'
    }));
    chain.plugin('ssrDefine').use(webpack.DefinePlugin, [{
            ...(0, ssr_common_utils_1.getDefineEnv)(),
            ...process.env,
            __isBrowser__: !isServer,
            __VUE_OPTIONS_API__: true,
            __VUE_PROD_DEVTOOLS__: false,
            ...(isServer ? define === null || define === void 0 ? void 0 : define.server : define === null || define === void 0 ? void 0 : define.client),
            ...define === null || define === void 0 ? void 0 : define.base
        }]);
    if ((0, ssr_common_utils_1.checkModuleExist)('element-plus')) {
        const { coerce } = require('semver');
        if (((_b = (_a = coerce(process.version)) === null || _a === void 0 ? void 0 : _a.major) !== null && _b !== void 0 ? _b : 0) < 14) {
            (0, ssr_common_utils_1.logErr)('Use element-plus auto import require Node.js Version >= v14 for optional chaining');
        }
        else {
            const AutoImport = require('unplugin-auto-import/webpack');
            const Components = require('unplugin-vue-components/webpack');
            const { ElementPlusResolver } = require('unplugin-vue-components/resolvers');
            chain.plugin('ele').use(AutoImport({
                resolvers: [ElementPlusResolver({
                        ssr: isServer
                    })]
            }));
            chain.plugin('ele2').use(Components({
                resolvers: [ElementPlusResolver({
                        ssr: isServer
                    })]
            }));
        }
    }
    chainBaseConfig(chain, isServer);
    return config;
};
exports.getBaseConfig = getBaseConfig;
//# sourceMappingURL=base.js.map