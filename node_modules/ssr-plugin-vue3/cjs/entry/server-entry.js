"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Routes = exports.serverRender = void 0;
const vue_1 = require("vue");
const ssr_common_utils_1 = require("ssr-common-utils");
const pinia_1 = require("pinia");
const ssr_serialize_javascript_1 = require("ssr-serialize-javascript");
const server_renderer_1 = require("@vue/server-renderer");
const combine_router_1 = require("./combine-router");
Object.defineProperty(exports, "Routes", { enumerable: true, get: function () { return combine_router_1.Routes; } });
const create_1 = require("./create");
const { FeRoutes, App, layoutFetch, Layout } = combine_router_1.Routes;
const staticConfig = (0, ssr_common_utils_1.getStaticConfig)();
const serverRender = async (ctx, config) => {
    var _a;
    const { mode, customeHeadScript, customeFooterScript, parallelFetch, prefix, isVite, isDev, clientPrefix, stream, fePort, https, rootId, bigpipe, hashRouter } = config;
    const store = (0, create_1.createStore)();
    const router = (0, create_1.createRouter)();
    const pinia = (0, pinia_1.createPinia)();
    const rawPath = (_a = ctx.request.path) !== null && _a !== void 0 ? _a : ctx.request.url;
    const [path, url] = [(0, ssr_common_utils_1.normalizePath)(rawPath, prefix), (0, ssr_common_utils_1.normalizePath)(ctx.request.url, prefix)];
    const routeItem = (0, ssr_common_utils_1.findRoute)(FeRoutes, path);
    (0, ssr_common_utils_1.checkRoute)({ routeItem, path });
    const getApp = ({ combineAysncData, state, layoutFetchData, asyncData, manifest, isCsr, jsInject, cssInject, inlineCssOrder, rootId }) => {
        const app = (0, vue_1.createSSRApp)({
            render: function () {
                const ssrDevInfo = { manifest: isDev ? manifest : '', rootId, fePort: isDev ? fePort : '', https: isDev ? https : '' };
                const innerHTML = (0, ssr_common_utils_1.splitPageInfo)({
                    'window.__USE_SSR__': !isCsr,
                    'window.__INITIAL_DATA__': isCsr ? {} : (0, ssr_serialize_javascript_1.serialize)(state),
                    'window.__INITIAL_PINIA_DATA__': isCsr ? {} : (0, ssr_serialize_javascript_1.serialize)(pinia.state.value),
                    'window.__USE_VITE__': isVite,
                    'window.prefix': `"${prefix}"`,
                    'window.clientPrefix': `"${clientPrefix !== null && clientPrefix !== void 0 ? clientPrefix : ''}"`,
                    'window.ssrDevInfo': JSON.stringify(ssrDevInfo),
                    'window.hashRouter': Boolean(hashRouter)
                });
                const initialData = (0, vue_1.h)('script', { innerHTML });
                const children = bigpipe ? '' : (0, vue_1.h)(App, { ctx, config, asyncData, fetchData: combineAysncData, reactiveFetchData: { value: combineAysncData }, ssrApp: app });
                const customeHeadScriptArr = (0, create_1.getVNode)((0, ssr_common_utils_1.getUserScriptVue)({ script: customeHeadScript, ctx, position: 'header', staticConfig })).concat((0, create_1.getInlineCssVNode)(inlineCssOrder));
                const customeFooterScriptArr = (0, create_1.getVNode)((0, ssr_common_utils_1.getUserScriptVue)({ script: customeFooterScript, ctx, position: 'footer', staticConfig }));
                return (0, vue_1.h)(Layout, { ctx, config, asyncData, fetchData: layoutFetchData, reactiveFetchData: { value: layoutFetchData } }, {
                    remInitial: () => (0, vue_1.h)('script', { innerHTML: ssr_common_utils_1.remInitial }),
                    customeHeadScript: () => customeHeadScriptArr,
                    customeFooterScript: () => customeFooterScriptArr,
                    children: () => children,
                    initialData: () => initialData,
                    cssInject: () => cssInject,
                    jsInject: () => jsInject,
                    injectHeader: () => [
                        customeHeadScriptArr,
                        cssInject
                    ],
                    content: () => [
                        (0, vue_1.h)('div', {
                            id: rootId.replace('#', '')
                        }, (0, vue_1.renderSlot)(this.$slots, 'default', {}, () => [children])),
                        initialData,
                        customeFooterScriptArr,
                        jsInject
                    ]
                });
            }
        });
        return app;
    };
    const fn = async () => {
        var _a, _b;
        const { fetch, webpackChunkName } = routeItem;
        const dynamicCssOrder = await (0, ssr_common_utils_1.getAsyncCssChunk)(ctx, webpackChunkName, config);
        const dynamicJsOrder = await (0, ssr_common_utils_1.getAsyncJsChunk)(ctx, webpackChunkName, config);
        const manifest = await (0, ssr_common_utils_1.getManifest)(config);
        const [inlineCssOrder, extraCssOrder] = await (0, ssr_common_utils_1.getInlineCss)({ dynamicCssOrder, manifest, config, type: 'vue3' });
        const isCsr = !!(mode === 'csr' || ((_a = ctx.request.query) === null || _a === void 0 ? void 0 : _a.csr));
        const cssInject = ((isVite && isDev) ? [(0, vue_1.h)('script', {
                type: 'module',
                src: '/@vite/client'
            })] : extraCssOrder.map(css => manifest[css]).filter(Boolean).map(css => (0, vue_1.h)('link', {
            rel: 'stylesheet',
            href: css
        }))).concat((isVite && isDev) ? [] : dynamicJsOrder.map(js => manifest[js]).filter(Boolean).map(js => (0, vue_1.h)('link', {
            href: js,
            as: 'script',
            rel: isVite ? 'modulepreload' : 'preload'
        })));
        const jsInject = (isVite && isDev) ? [(0, vue_1.h)('script', {
                type: 'module',
                src: '/node_modules/ssr-plugin-vue3/esm/entry/client-entry.js'
            })] : dynamicJsOrder.map(js => manifest[js]).filter(Boolean).map(js => (0, vue_1.h)('script', {
            src: js,
            type: isVite ? 'module' : 'text/javascript'
        }));
        let [layoutFetchData, fetchData] = [{}, {}];
        if (!isCsr && !bigpipe) {
            // not fetch when generate <head>
            router.push(url);
            await router.isReady();
            const currentFetch = fetch ? (await fetch()).default : null;
            const { value } = router.currentRoute;
            const lF = layoutFetch ? layoutFetch({ store, router: value, ctx, pinia }, ctx) : Promise.resolve({});
            const CF = currentFetch ? currentFetch({ store, router: value, ctx, pinia }, ctx) : Promise.resolve({});
            [layoutFetchData, fetchData] = parallelFetch ? await Promise.all([lF, CF]) : [await lF, await CF];
        }
        else {
            (0, ssr_common_utils_1.logGreen)(`Current path ${path} use csr render mode`);
        }
        const combineAysncData = Object.assign({}, layoutFetchData !== null && layoutFetchData !== void 0 ? layoutFetchData : {}, fetchData !== null && fetchData !== void 0 ? fetchData : {});
        const asyncData = {
            value: combineAysncData
        };
        const state = Object.assign({}, (_b = store.state) !== null && _b !== void 0 ? _b : {}, asyncData.value);
        let err = null;
        const app = getApp({
            state,
            asyncData,
            layoutFetchData,
            combineAysncData,
            manifest,
            jsInject,
            cssInject,
            isCsr,
            inlineCssOrder,
            rootId
        });
        if (!app.config.errorHandler) {
            app.config.errorHandler = e => { err = e; };
        }
        app.use(router);
        app.use(store);
        app.use(pinia);
        const res = await ssr_common_utils_1.appLocalStoreageWrapper.run({
            app
        }, async () => {
            if (stream) {
                const stream = (0, server_renderer_1.renderToNodeStream)(app);
                if (err) {
                    throw new Error(err);
                }
                return stream;
            }
            else {
                const teleportsContext = {};
                const html = await (0, server_renderer_1.renderToString)(app, teleportsContext);
                if (err) {
                    throw new Error(err);
                }
                return ({
                    html,
                    teleportsContext
                });
            }
        });
        return res;
    };
    const res = await ssr_common_utils_1.localStorageWrapper.run({
        pinia,
        store,
        ctx
    }, fn);
    return res;
};
exports.serverRender = serverRender;
//# sourceMappingURL=server-entry.js.map