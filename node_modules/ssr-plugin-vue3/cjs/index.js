"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clientPlugin = void 0;
const ssr_common_utils_1 = require("ssr-common-utils");
const { isVite, optimize } = (0, ssr_common_utils_1.loadConfig)();
const spinner = require('ora')('Building');
function clientPlugin() {
    return {
        name: 'plugin-vue3',
        start: async () => {
            if (isVite) {
                const { viteStart } = await Promise.resolve().then(() => require('./tools/vite'));
                await viteStart();
            }
            else {
                if (optimize) {
                    spinner.start();
                    const { viteBuildClient } = await Promise.resolve().then(() => require('./tools/vite'));
                    await viteBuildClient();
                    process.env.NODE_ENV = 'development';
                    spinner.stop();
                    const { webpackStart } = await Promise.resolve().then(() => require('./tools/webpack'));
                    await webpackStart();
                }
                else {
                    const { webpackStart } = await Promise.resolve().then(() => require('./tools/webpack'));
                    await webpackStart();
                }
            }
        },
        build: async () => {
            if (isVite) {
                const { viteBuild } = await Promise.resolve().then(() => require('./tools/vite'));
                await viteBuild();
            }
            else {
                if (optimize) {
                    spinner.start();
                    const { viteBuildClient } = await Promise.resolve().then(() => require('./tools/vite'));
                    await viteBuildClient();
                    spinner.stop();
                    const { webpackBuild } = await Promise.resolve().then(() => require('./tools/webpack'));
                    await webpackBuild();
                }
                else {
                    const { webpackBuild } = await Promise.resolve().then(() => require('./tools/webpack'));
                    await webpackBuild();
                }
            }
        }
    };
}
exports.clientPlugin = clientPlugin;
__exportStar(require("./tools/vite"), exports);
__exportStar(require("./types"), exports);
//# sourceMappingURL=index.js.map