import { h, createSSRApp, createApp, reactive, renderSlot } from 'vue';
import { findRoute, isMicro, setStore, setPinia, setApp } from 'ssr-common-utils';
import { createPinia } from 'pinia';
import { createRouter, createStore } from './create';
import { Routes } from './combine-router';
const { FeRoutes, App, layoutFetch } = Routes;
let hasRender = false;
async function getAsyncCombineData(fetch, store, router, pinia) {
    const layoutFetchData = layoutFetch ? await layoutFetch({ store, router, pinia }) : {};
    let fetchData = {};
    if (fetch) {
        const fetchFn = await fetch();
        fetchData = await fetchFn.default({ store, router, pinia });
    }
    return Object.assign({}, layoutFetchData !== null && layoutFetchData !== void 0 ? layoutFetchData : {}, fetchData !== null && fetchData !== void 0 ? fetchData : {});
}
const clientRender = async () => {
    var _a, _b, _c, _d, _e, _f;
    const store = createStore();
    const router = createRouter({
        base: isMicro() ? window.clientPrefix : window.prefix,
        hashRouter: window.hashRouter
    });
    const pinia = createPinia();
    setStore(store);
    setPinia(pinia);
    const create = window.__USE_SSR__ ? createSSRApp : createApp;
    if (window.__INITIAL_DATA__) {
        store.replaceState(window.__INITIAL_DATA__);
    }
    if (window.__INITIAL_PINIA_DATA__) {
        pinia.state.value = window.__INITIAL_PINIA_DATA__;
    }
    const asyncData = reactive({
        value: (_a = window.__INITIAL_DATA__) !== null && _a !== void 0 ? _a : {}
    });
    const reactiveFetchData = reactive({
        value: (_b = window.__INITIAL_DATA__) !== null && _b !== void 0 ? _b : {}
    });
    const fetchData = (_c = window.__INITIAL_DATA__) !== null && _c !== void 0 ? _c : {}; // will be remove at next major version
    const app = create({
        render() {
            return renderSlot(this.$slots, 'default', {}, () => [h(App, {
                    asyncData,
                    fetchData,
                    reactiveFetchData,
                    ssrApp: app
                })]);
        }
    });
    app.use(store);
    app.use(router);
    app.use(pinia);
    setApp(app);
    router.beforeResolve(async (to, from, next) => {
        var _a;
        if (hasRender || !window.__USE_SSR__) {
            // 找到要进入的组件并提前执行 fetch 函数
            const { fetch } = findRoute(FeRoutes, to.path);
            const combineAysncData = await getAsyncCombineData(fetch, store, to, pinia);
            (_a = to.matched) === null || _a === void 0 ? void 0 : _a.forEach(item => {
                var _a;
                item.props.default = Object.assign({}, (_a = item.props.default) !== null && _a !== void 0 ? _a : {}, {
                    fetchData: combineAysncData
                });
            });
            reactiveFetchData.value = combineAysncData;
            asyncData.value = Object.assign(asyncData.value, combineAysncData);
        }
        hasRender = true;
        next();
    });
    await router.isReady();
    app.mount((_d = window.ssrDevInfo.rootId) !== null && _d !== void 0 ? _d : '#app', !!window.__USE_SSR__); // judge ssr/csr
    if (!window.__USE_VITE__) {
        (_f = (_e = module === null || module === void 0 ? void 0 : module.hot) === null || _e === void 0 ? void 0 : _e.accept) === null || _f === void 0 ? void 0 : _f.call(_e); // webpack hmr for vue jsx
    }
};
clientRender();
export { clientRender };
//# sourceMappingURL=client-entry.js.map