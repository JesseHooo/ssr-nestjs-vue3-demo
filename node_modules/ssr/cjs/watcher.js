"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onWatcher = exports.createWatcher = void 0;
const chokidar = require("chokidar");
const createWatcher = async () => {
    const { getPagesDir } = await Promise.resolve().then(() => require('ssr-common-utils'));
    const pageDir = getPagesDir();
    const watcher = chokidar.watch(pageDir, {
        ignored: /.(less|css|scss)/,
        persistent: true
    });
    return watcher;
};
exports.createWatcher = createWatcher;
const onWatcher = async (watcher) => {
    const { parseFeRoutes, logGreen, logErr } = await Promise.resolve().then(() => require('ssr-common-utils'));
    watcher
        .on('add', async (path) => {
        logGreen(`File ${path} has been added ParseFeRoutes reload`);
        await parseFeRoutes().catch(err => logErr('ParseFeRoutes Error' + err));
    })
        .on('addDir', async (path) => {
        logGreen(`Dir ${path} has been added ParseFeRoutes reload`);
        await parseFeRoutes().catch(err => logErr('ParseFeRoutes Error' + err));
    })
        .on('unlink', async (path) => {
        logGreen(`File ${path} has been deleted ParseFeRoutes reload`);
        await parseFeRoutes().catch(err => logErr('ParseFeRoutes Error' + err));
    })
        .on('unlinkDir', async (path) => {
        logGreen(`Dir ${path} has been deleted ParseFeRoutes reload`);
        await parseFeRoutes().catch(err => logErr('ParseFeRoutes Error' + err));
    });
};
exports.onWatcher = onWatcher;
//# sourceMappingURL=watcher.js.map