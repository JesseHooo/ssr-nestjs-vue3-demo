"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCommonChain = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const parse_1 = require("../parse");
const cwd_1 = require("../cwd");
const loadConfig_1 = require("../loadConfig");
const log_1 = require("../log");
const judge_1 = require("../judge");
const build_utils_1 = require("../build-utils");
const static_1 = require("../static");
const [antdVersion, vantVersion] = [(0, judge_1.getPkgMajorVersion)('antd'), (0, judge_1.getPkgMajorVersion)('vant')];
const isAntd4 = antdVersion === 4;
if (antdVersion === 5) {
    (0, log_1.logWarning)('Check antd@5.x has been installed, antd@4.x is more recommend in ssr environment');
}
const addBabelLoader = (chain, envOptions, isServer) => {
    var _a, _b;
    const framework = (0, cwd_1.judgeFramework)();
    const { babelOptions, isDev } = (0, loadConfig_1.loadConfig)();
    let plugins = [];
    let presets = [];
    if (['ssr-plugin-react18', 'ssr-plugin-react'].includes(framework)) {
        plugins = [
            [(0, cwd_1.loadModuleFromFramework)('@babel/plugin-transform-runtime'), {
                    regenerator: false,
                    corejs: false,
                    helpers: true
                }],
            [(0, cwd_1.loadModuleFromFramework)('@babel/plugin-proposal-private-methods'), { loose: true }],
            [(0, cwd_1.loadModuleFromFramework)('@babel/plugin-proposal-private-property-in-object'), { loose: true }]
        ];
        if (isAntd4) {
            plugins.push([
                (0, cwd_1.loadModuleFromFramework)('babel-plugin-import'),
                {
                    libraryName: 'antd',
                    libraryDirectory: 'lib',
                    style: true
                }, 'antd'
            ]);
        }
        if (!isServer && isDev) {
            plugins.push((0, cwd_1.loadModuleFromFramework)('react-refresh/babel'));
        }
        presets = [
            [
                (0, cwd_1.loadModuleFromFramework)('@babel/preset-env'),
                envOptions
            ],
            [(0, cwd_1.loadModuleFromFramework)('babel-preset-react-app'), {
                    flow: false,
                    typescript: true,
                    runtime: 'automatic'
                }]
        ];
    }
    if (['ssr-plugin-vue3', 'ssr-plugin-vue'].includes(framework)) {
        plugins = [
            [
                (0, cwd_1.loadModuleFromFramework)('@babel/plugin-transform-runtime'),
                {
                    corejs: false
                }
            ],
            [
                (0, cwd_1.loadModuleFromFramework)('babel-plugin-import'),
                {
                    libraryName: 'ant-design-vue',
                    libraryDirectory: 'lib',
                    style: true
                }, 'ant-design-vue'
            ]
        ];
        if (vantVersion && vantVersion < 4) {
            plugins.push([
                (0, cwd_1.loadModuleFromFramework)('babel-plugin-import'),
                {
                    libraryName: 'vant',
                    libraryDirectory: 'lib',
                    style: true
                }, 'vant'
            ]);
        }
        if (framework === 'ssr-plugin-vue3') {
            plugins.push((0, cwd_1.loadModuleFromFramework)('@vue/babel-plugin-jsx'));
        }
        presets = [
            [
                (0, cwd_1.loadModuleFromFramework)('@babel/preset-typescript'),
                {
                    isTSX: true,
                    allExtensions: true
                }
            ],
            [
                (0, cwd_1.loadModuleFromFramework)('@babel/preset-env'),
                envOptions
            ]
        ];
    }
    plugins.push([(0, cwd_1.loadModuleFromFramework)('@babel/plugin-proposal-optional-chaining')]);
    plugins.push(...(_a = babelOptions === null || babelOptions === void 0 ? void 0 : babelOptions.plugins) !== null && _a !== void 0 ? _a : []);
    presets.push(...(_b = babelOptions === null || babelOptions === void 0 ? void 0 : babelOptions.presets) !== null && _b !== void 0 ? _b : []);
    plugins = plugins.filter(Boolean);
    presets = presets.filter(Boolean);
    chain.use('babel-loader')
        .loader((0, cwd_1.loadModuleFromFramework)('babel-loader'))
        .options({
        cacheDirectory: true,
        cacheCompression: false,
        sourceType: 'unambiguous',
        presets,
        plugins
    })
        .end();
};
const addCommonChain = (chain, isServer) => {
    var _a, _b, _c;
    const { babelOptions, corejsOptions, babelExtraModule, assetsDir, optimize } = (0, loadConfig_1.loadConfig)();
    const { publicPath, imagePath } = (0, parse_1.getImageOutputPath)();
    const envOptions = {
        modules: false,
        ...corejsOptions
    };
    if (process.env.NOMINIFY) {
        chain.optimization.minimize(false);
    }
    chain.devtool((_a = process.env.GENERATE_SOURCEMAP) !== null && _a !== void 0 ? _a : '');
    const babelModule = chain.module
        .rule('compileBabel')
        .test(/\.(js|mjs|jsx|ts|tsx)$/)
        .exclude
        .add(/node_modules|core-js/)
        .add((_b = babelOptions === null || babelOptions === void 0 ? void 0 : babelOptions.exclude) !== null && _b !== void 0 ? _b : [])
        .end();
    chain.module
        .rule('mjs')
        .test(/\.mjs/)
        .type('javascript/auto')
        .end();
    const module = chain.module
        .rule('compileBabelForExtraModule')
        .test(/\.(js|mjs|jsx|ts|tsx)$/)
        .include;
    const babelForExtraModule = module.add(babelExtraModule !== null && babelExtraModule !== void 0 ? babelExtraModule : []).add((_c = babelOptions === null || babelOptions === void 0 ? void 0 : babelOptions.include) !== null && _c !== void 0 ? _c : []).end().exclude.add(/core-js/).end();
    addBabelLoader(babelModule, envOptions, isServer);
    addBabelLoader(babelForExtraModule, envOptions, isServer);
    chain.module
        .rule('images')
        .test(/\.(jpe?g|png|svg|gif)(\?[a-z0-9=.]+)?$/)
        .use('url-loader')
        .loader((0, cwd_1.loadModuleFromFramework)('url-loader'))
        .options({
        name: '[name].[hash:8].[ext]',
        // require 图片的时候不用加 .default
        esModule: false,
        limit: 4096,
        fallback: {
            loader: (0, cwd_1.loadModuleFromFramework)('file-loader'),
            options: {
                emitFile: !isServer,
                publicPath,
                name: '[name].[hash:8].[ext]',
                esModule: false,
                outputPath: imagePath
            }
        }
    })
        .end();
    chain.module
        .rule('fonts')
        .test(/\.(eot|woff|woff2|ttf)(\?.*)?$/)
        .use('file-loader')
        .loader((0, cwd_1.loadModuleFromFramework)('file-loader'))
        .options({
        name: `${assetsDir}/[name].[hash:8].[ext]`,
        esModule: false,
        emitFile: !isServer
    });
    const BundleAnalyzerPlugin = require((0, cwd_1.loadModuleFromFramework)('webpack-bundle-analyzer')).BundleAnalyzerPlugin;
    const generateAnalysis = Boolean(process.env.GENERATE_ANALYSIS);
    if (!isServer) {
        static_1.nameSpaceBuiltinModules.forEach(moduleName => {
            chain.node.set(moduleName, 'empty');
        });
        chain.when(generateAnalysis, chain => {
            chain.plugin('analyze').use(BundleAnalyzerPlugin);
        });
        chain.plugin('WriteAsyncManifest').use(function () {
            return {
                apply(compiler) {
                    compiler.hooks.watchRun.tap('ClearLastAsyncChunkMap', async () => {
                        build_utils_1.asyncChunkMap.val = {};
                    });
                    compiler.hooks.done.tapAsync('WriteAsyncChunkManifest', async (params, callback) => {
                        if (!optimize) {
                            await fs_1.promises.writeFile((0, path_1.resolve)((0, cwd_1.getCwd)(), './build/asyncChunkMap.json'), JSON.stringify(build_utils_1.asyncChunkMap.val));
                        }
                        callback();
                    });
                }
            };
        });
    }
};
exports.addCommonChain = addCommonChain;
//# sourceMappingURL=common-chain.js.map