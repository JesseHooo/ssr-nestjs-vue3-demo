/// <reference types="node" />
/// <reference types="node" />
import type { Readable } from 'stream';
import type { Pinia } from 'pinia';
import type { Context } from 'react';
import type { App } from 'vue';
import type { IContext, PipeableStream, ISSRContext } from 'ssr-types';
export interface StoreData {
    pinia?: Pinia;
    store?: any;
    context?: Context<IContext>;
    ctx?: ISSRContext;
}
export interface AppStore {
    app?: App;
}
declare type StorageReturnVal = Promise<string | Readable | NodeJS.ReadableStream | PipeableStream | {
    html: string;
    teleportsContext: any;
}>;
export declare const localStorageWrapper: {
    run: (store: StoreData, callback: (args?: unknown) => StorageReturnVal) => Promise<string | Readable | NodeJS.ReadableStream | PipeableStream | {
        html: string;
        teleportsContext: any;
    }>;
    getStore: () => StoreData | undefined;
};
export declare const appLocalStoreageWrapper: {
    run: (store: AppStore, callback: (args?: unknown) => StorageReturnVal) => Promise<string | Readable | NodeJS.ReadableStream | PipeableStream | {
        html: string;
        teleportsContext: any;
    }>;
    getStore: () => AppStore | undefined;
};
export declare const useStore: <T = any>() => T;
export declare const usePinia: () => Pinia | undefined;
export declare const useStoreContext: () => Context<IContext<any>> | undefined;
export declare const useApp: () => App<any> | undefined;
export declare const useCtx: () => Context<IContext<any>> | undefined;
export {};
//# sourceMappingURL=server-store.d.ts.map