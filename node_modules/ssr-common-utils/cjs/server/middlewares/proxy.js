"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDevProxyMiddlewaresArr = void 0;
const http_proxy_middleware_1 = require("http-proxy-middleware");
const koaConnect = require("koa2-connect");
const cwd_1 = require("../cwd");
const loadConfig_1 = require("../loadConfig");
function onProxyReq(proxyReq, req) {
    Object.keys(req.headers).forEach(function (key) {
        proxyReq.setHeader(key, req.headers[key]);
    });
}
const kc = koaConnect.default || koaConnect;
const getDevProxyMiddlewaresArr = async () => {
    const { fePort, proxy, isDev, https, proxyKey, isVite } = (0, loadConfig_1.loadConfig)();
    const serverFramework = (0, cwd_1.judgeServerFramework)();
    const isExpress = serverFramework === 'ssr-plugin-nestjs';
    const proxyMiddlewaresArr = [];
    function registerProxy(proxy) {
        for (const path in proxy) {
            const options = proxy[path];
            // 如果底层服务端框架是基于 express的。则不需要用 koaConnect 转换为 koa 中间件
            const middleware = isExpress ? (0, http_proxy_middleware_1.createProxyMiddleware)(path, options) : kc((0, http_proxy_middleware_1.createProxyMiddleware)(path, options));
            proxyMiddlewaresArr.push(middleware);
        }
    }
    proxy && registerProxy(proxy);
    if (isDev) {
        if (isVite) {
            const framework = (0, cwd_1.judgeFramework)();
            if (!framework) {
                throw new Error('judgeFramework error');
            }
            // 本地开发请求走 vite 接管 前端文件夹请求
            const { createServer } = require('vite');
            const { clientConfig } = require(framework);
            const viteServer = await createServer(clientConfig);
            proxyMiddlewaresArr.push(isExpress ? viteServer.middlewares : kc(viteServer.middlewares));
        }
        else {
            // Webpack 场景 在本地开发阶段代理 serverPort 的资源到 fePort
            // 例如 http://localhost:3000/static/js/page.chunk.js -> http://localhost:8999/static/js/page.chunk.js
            const remoteStaticServerOptions = {
                target: `${https ? 'https' : 'http'}://127.0.0.1:${fePort}`,
                changeOrigin: true,
                secure: false,
                onProxyReq,
                logLevel: 'warn'
            };
            const proxyPathMap = {
                '/sockjs-node': remoteStaticServerOptions,
                '/__webpack_dev_server__': remoteStaticServerOptions,
                '/*.wasm': remoteStaticServerOptions
            };
            for (const key of proxyKey) {
                proxyPathMap[key] = remoteStaticServerOptions;
            }
            registerProxy(proxyPathMap);
        }
    }
    return proxyMiddlewaresArr;
};
exports.getDevProxyMiddlewaresArr = getDevProxyMiddlewaresArr;
//# sourceMappingURL=proxy.js.map