"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDependencies = exports.getPkgName = exports.normalizePosixPath = exports.asyncChunkMap = void 0;
const path_1 = require("path");
const asyncChunkMap = {
    val: {}
};
exports.asyncChunkMap = asyncChunkMap;
const normalizePosixPath = (value) => {
    return path_1.sep === '\\'
        ? value.replace(/\\/g, '/')
        : value;
};
exports.normalizePosixPath = normalizePosixPath;
function getPkgName(modulePath, packageFolder = 'node_modules') {
    if (typeof modulePath === 'string' && modulePath.includes(packageFolder)) {
        const path = (0, exports.normalizePosixPath)(modulePath);
        const segments = path.split('/');
        const index = segments.lastIndexOf(packageFolder);
        if (index > -1) {
            const name = segments[index + 1] || '';
            const scopedName = segments[index + 2] || '';
            if (name[0] === '@') {
                return scopedName ? `${name}/${scopedName}` : '';
            }
            if (name) {
                return name;
            }
        }
    }
    return '';
}
exports.getPkgName = getPkgName;
const getDependencies = (abPath, allDependencies) => {
    const lastIndex = abPath.lastIndexOf('node_modules');
    if (lastIndex === -1) {
        return;
    }
    const pkgName = getPkgName(abPath);
    const pkgJson = (0, path_1.resolve)(abPath.slice(0, lastIndex), `./node_modules/${pkgName}/package.json`);
    const { dependencies = {}, peerDependencies = {} } = require(pkgJson);
    Object.entries(Object.assign(dependencies, peerDependencies)).forEach(([key, value]) => {
        if (!allDependencies[key]) {
            allDependencies[key] = value;
            try {
                const childId = require.resolve(key, {
                    paths: [abPath]
                });
                (0, exports.getDependencies)(childId, allDependencies);
            }
            catch (error) {
                // ignore it, some package has not correct main field or exports field in package.json like @babel/runtime cause require.resolve throw error
            }
        }
    });
};
exports.getDependencies = getDependencies;
//# sourceMappingURL=build-utils.js.map