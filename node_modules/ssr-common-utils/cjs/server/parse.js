"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFeRoutes = exports.getImageOutputPath = exports.getOutputPublicPath = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const cwd_1 = require("./cwd");
const loadConfig_1 = require("./loadConfig");
const common_1 = require("../common");
const getOutputPublicPath = () => {
    // return /client/
    const { publicPath, isDev } = (0, loadConfig_1.loadConfig)();
    const path = (0, common_1.normalizeEndPath)(publicPath);
    return isDev ? path : `${path}client/`;
};
exports.getOutputPublicPath = getOutputPublicPath;
const getImageOutputPath = () => {
    const { publicPath, isDev, assetsDir } = (0, loadConfig_1.loadConfig)();
    const imagePath = `${assetsDir}/images`;
    const normalizePath = (0, common_1.normalizeEndPath)(publicPath);
    return {
        publicPath: isDev ? `${normalizePath}${imagePath}` : `${normalizePath}client/${imagePath}`,
        imagePath
    };
};
exports.getImageOutputPath = getImageOutputPath;
const parseFeRoutes = async () => {
    const dir = (0, cwd_1.getPagesDir)();
    const { dynamic, routerPriority, routerOptimize } = (0, loadConfig_1.loadConfig)();
    const framework = (0, cwd_1.judgeFramework)();
    // 根据目录结构生成前端路由表
    const pathRecord = ['']; // 路径记录
    // @ts-expect-error
    const route = {};
    let arr = await renderRoutes(dir, pathRecord, route);
    if (routerPriority) {
        // 路由优先级排序
        arr.sort((a, b) => {
            // 没有显示指定的路由优先级统一为 0
            return (routerPriority[b.path] || 0) - (routerPriority[a.path] || 0);
        });
    }
    if (routerOptimize) {
        // 路由过滤
        if (routerOptimize.include && routerOptimize.exclude) {
            throw new Error('include and exclude cannot exist synchronal');
        }
        if (routerOptimize.include) {
            arr = arr.filter(route => { var _a; return (_a = routerOptimize === null || routerOptimize === void 0 ? void 0 : routerOptimize.include) === null || _a === void 0 ? void 0 : _a.includes(route.path); });
        }
        if (routerOptimize.exclude) {
            arr = arr.filter(route => { var _a; return !((_a = routerOptimize === null || routerOptimize === void 0 ? void 0 : routerOptimize.exclude) === null || _a === void 0 ? void 0 : _a.includes(route.path)); });
        }
    }
    const layoutPath = '@/components/layout/index';
    const AppPath = '@/components/layout/App';
    const layoutFetch = await (0, cwd_1.accessFile)((0, path_1.join)((0, cwd_1.getFeDir)(), './components/layout/fetch.ts'));
    const accessStore = await (0, cwd_1.accessFile)((0, path_1.join)((0, cwd_1.getFeDir)(), './store/index.ts'));
    const re = /"webpackChunkName":("(.+?)")/g;
    const isReact = framework.includes('ssr-plugin-react');
    let routes = `
      // The file is provisional which will be overwritten when restart
      export const FeRoutes = ${JSON.stringify(arr)} 
      export { default as Layout } from "${layoutPath}"
      export { default as App } from "${AppPath}"
      ${layoutFetch ? 'export { default as layoutFetch } from "@/components/layout/fetch"' : ''}
      ${accessStore && !isReact ? 'export * as store from "@/store/index"' : ''}
      ${accessStore && isReact ? 'export * from "@/store/index"' : ''}
      `;
    routes = routes.replace(/"component":("(.+?)")/g, (global, m1, m2) => {
        const currentWebpackChunkName = re.exec(routes)[2];
        if (dynamic) {
            return `"component": function dynamicComponent () {
          return import(/* webpackChunkName: "${currentWebpackChunkName}" */ '${m2.replace(/\^/g, '"')}')
        }
        `;
        }
        else {
            return `"component": require('${m2.replace(/\^/g, '"')}').default`;
        }
    });
    re.lastIndex = 0;
    routes = routes.replace(/"fetch":("(.+?)")/g, (global, m1, m2) => {
        const currentWebpackChunkName = re.exec(routes)[2];
        return `"fetch": () => import(/* webpackChunkName: "${currentWebpackChunkName}-fetch" */ '${m2.replace(/\^/g, '"')}')`;
    });
    await (0, cwd_1.writeRoutes)(routes, 'ssr-declare-routes.js');
    await (0, cwd_1.transformManualRoutes)();
};
exports.parseFeRoutes = parseFeRoutes;
const renderRoutes = async (pageDir, pathRecord, route) => {
    let arr = [];
    const pagesFolders = await fs_1.promises.readdir(pageDir);
    const prefixPath = pathRecord.join('/');
    const aliasPath = `@/pages${prefixPath}`;
    const routeArr = [];
    const fetchExactMatch = pagesFolders.filter(p => p.includes('fetch'));
    for (const pageFiles of pagesFolders) {
        const abFolder = (0, path_1.join)(pageDir, pageFiles);
        const isDirectory = (await fs_1.promises.stat(abFolder)).isDirectory();
        if (isDirectory) {
            // 如果是文件夹则递归下去, 记录路径
            pathRecord.push(pageFiles);
            const childArr = await renderRoutes(abFolder, pathRecord, Object.assign({}, route));
            pathRecord.pop(); // 回溯
            arr = arr.concat(childArr);
        }
        else {
            // 遍历一个文件夹下面的所有文件
            if (!pageFiles.includes('render') || (!pageFiles.endsWith('.vue') && !pageFiles.endsWith('.tsx') && !pageFiles.endsWith('.ts') && !pageFiles.endsWith('.js') && !pageFiles.endsWith('.jsx'))) {
                continue;
            }
            // 拿到具体的文件
            if (pageFiles.includes('render$')) {
                /* /news/:id */
                route.path = `${prefixPath}/:${getDynamicParam(pageFiles)}`;
                route.component = `${aliasPath}/${pageFiles}`;
                let webpackChunkName = pathRecord.join('-');
                if (webpackChunkName.startsWith('-')) {
                    webpackChunkName = webpackChunkName.replace('-', '');
                }
                route.webpackChunkName = `${webpackChunkName}-${getDynamicParam(pageFiles).replace(/\/:\??/g, '-').replace('?', '-optional').replace('*', '-all')}`;
            }
            else if (pageFiles.includes('render')) {
                /* /news */
                route.path = `${prefixPath}`;
                route.component = `${aliasPath}/${pageFiles}`;
                let webpackChunkName = pathRecord.join('-');
                if (webpackChunkName.startsWith('-')) {
                    webpackChunkName = webpackChunkName.replace('-', '');
                }
                route.webpackChunkName = webpackChunkName;
            }
            if (fetchExactMatch.length >= 2) {
                // fetch文件数量 >=2 启用完全匹配策略 render$id => fetch$id, render => fetch
                const fetchPageFiles = `${pageFiles.replace('render', 'fetch').split('.')[0]}.ts`;
                if (fetchExactMatch.includes(fetchPageFiles)) {
                    route.fetch = `${aliasPath}/${fetchPageFiles}`;
                }
            }
            else if (fetchExactMatch.includes('fetch.ts')) {
                // 单 fetch 文件的情况 所有类型的 render 都对应该 fetch
                route.fetch = `${aliasPath}/fetch.ts`;
            }
            route.name = route.webpackChunkName;
            routeArr.push({ ...route });
        }
    }
    routeArr.forEach((r) => {
        var _a;
        if ((_a = r.path) === null || _a === void 0 ? void 0 : _a.includes('index')) {
            // /index 映射为 /
            if (r.path.split('/').length >= 3) {
                r.path = r.path.replace('/index', '');
            }
            else {
                r.path = r.path.replace('index', '');
            }
        }
        r.path && arr.push(r);
    });
    return arr;
};
const getDynamicParam = (url) => {
    return url.split('$').filter(r => r !== 'render' && r !== '').map(r => r.replace(/\.[\s\S]+/, '').replace('#', '?')
        .replace('&', '*')).join('/:');
};
//# sourceMappingURL=parse.js.map