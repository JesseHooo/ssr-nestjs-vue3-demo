"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useStoreContext = exports.setStoreContext = exports.useApp = exports.setApp = exports.useCtx = exports.usePinia = exports.setPinia = exports.useStore = exports.setStore = void 0;
const storeCache = {
    val: {
        store: {}
    },
    set: function (store) {
        this.val.store = store;
    },
    get: function () {
        return this.val.store;
    }
};
const piniaCache = {
    val: {
        pinia: {}
    },
    set: function (pinia) {
        this.val.pinia = pinia;
    },
    get: function () {
        return this.val.pinia;
    }
};
const appCache = {
    val: {
        app: {}
    },
    set: function (app) {
        this.val.app = app;
    },
    get: function () {
        return this.val.app;
    }
};
const contextCache = {
    val: {
        obj: {}
    },
    set: function (app) {
        this.val.obj = app;
    },
    get: function () {
        return this.val.obj;
    }
};
const setStore = (store) => {
    storeCache.set(store);
};
exports.setStore = setStore;
const useStore = () => {
    return storeCache.get();
};
exports.useStore = useStore;
const setPinia = (pinia) => {
    piniaCache.set(pinia);
};
exports.setPinia = setPinia;
const usePinia = () => {
    return piniaCache.get();
};
exports.usePinia = usePinia;
const useCtx = () => {
    console.warn('useCtx can only be used on the server side');
    return {};
};
exports.useCtx = useCtx;
const setApp = (app) => {
    appCache.set(app);
};
exports.setApp = setApp;
const useApp = () => {
    return appCache.get();
};
exports.useApp = useApp;
const setStoreContext = (context) => {
    contextCache.set(context);
};
exports.setStoreContext = setStoreContext;
const useStoreContext = () => {
    return contextCache.get();
};
exports.useStoreContext = useStoreContext;
//# sourceMappingURL=client-store.js.map