import type { UserConfig, ISSRContext, IConfig } from 'ssr-types';
export declare const setHeader: (ctx: ISSRContext, serverFrameWork: string) => void;
export declare const splitPageInfo: (info: Record<string, string | boolean | object>) => string;
export declare const nomalrizeOrder: (order: UserConfig['extraJsOrder'], ctx: ISSRContext) => string[];
export declare const getDefineEnv: () => Record<string, string | undefined>;
export declare const getAsyncCssChunk: (ctx: ISSRContext, webpackChunkName: string, config: IConfig) => Promise<string[]>;
export declare const getAsyncJsChunk: (ctx: ISSRContext, webpackChunkName: string, config: IConfig) => Promise<string[]>;
export declare const getUserScriptVue: (options: {
    script: UserConfig['customeHeadScript'];
    ctx: ISSRContext;
    position: 'header' | 'footer';
    staticConfig: UserConfig;
}) => {
    tagName?: string | undefined;
    describe?: object | {
        attrs: object;
    } | undefined;
    content?: string | undefined;
}[];
export declare const getScriptArr: (script: UserConfig['customeHeadScript'], ctx: ISSRContext) => import("ssr-types").Script;
export declare const getInlineCss: ({ dynamicCssOrder, manifest, config, type }: {
    dynamicCssOrder: string[];
    manifest: Record<string, string | undefined>;
    config: UserConfig;
    type: 'vue3' | 'vue';
}) => Promise<string[][]>;
//# sourceMappingURL=runtime.d.ts.map