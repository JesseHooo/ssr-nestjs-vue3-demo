import { AsyncLocalStorage } from 'async_hooks';
const localStorage = new AsyncLocalStorage();
export const localStorageWrapper = {
    run: async function (store, callback) {
        const res = await localStorage.run(store, async function () {
            const res = await callback();
            return res;
        });
        return res;
    },
    getStore: () => localStorage.getStore()
};
const appLocalStoreage = new AsyncLocalStorage();
export const appLocalStoreageWrapper = {
    run: async function (store, callback) {
        const res = await appLocalStoreage.run(store, async function () {
            const res = await callback();
            return res;
        });
        return res;
    },
    getStore: () => appLocalStoreage.getStore()
};
export const useStore = () => { var _a; return (_a = localStorage.getStore()) === null || _a === void 0 ? void 0 : _a.store; };
export const usePinia = () => { var _a; return (_a = localStorage.getStore()) === null || _a === void 0 ? void 0 : _a.pinia; };
export const useStoreContext = () => {
    var _a;
    return (_a = localStorageWrapper.getStore()) === null || _a === void 0 ? void 0 : _a.context;
};
export const useApp = () => { var _a; return (_a = appLocalStoreage.getStore()) === null || _a === void 0 ? void 0 : _a.app; };
export const useCtx = () => { var _a; return (_a = localStorage.getStore()) === null || _a === void 0 ? void 0 : _a.context; };
//# sourceMappingURL=server-store.js.map