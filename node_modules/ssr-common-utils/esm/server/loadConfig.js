import { join } from 'path';
import { getCwd, getUserConfig, getFeDir, judgeFramework, loadModuleFromFramework, stringifyDefine, accessFileSync, checkModuleExist } from './cwd';
import { coerce } from 'semver';
import { normalizeStartPath, normalizeEndPath } from '../common';
const loadConfig = () => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    const cwd = getCwd();
    const framework = judgeFramework();
    const userConfig = getUserConfig();
    const mode = 'ssr';
    const stream = false;
    const isVite = accessFileSync(join(cwd, './build/tag.json'));
    const optimize = process.env.OPTIMIZE === '1';
    const isCI = !!process.env.CI_TEST;
    const vue3ServerEntry = join(cwd, './node_modules/ssr-plugin-vue3/esm/entry/server-entry.js');
    const vue3ClientEntry = join(cwd, './node_modules/ssr-plugin-vue3/esm/entry/client-entry.js');
    const vueServerEntry = join(cwd, './node_modules/ssr-plugin-vue/esm/entry/server-entry.js');
    const vueClientEntry = join(cwd, './node_modules/ssr-plugin-vue/esm/entry/client-entry.js');
    const reactServerEntry = join(cwd, './node_modules/ssr-plugin-react/esm/entry/server-entry.js');
    const reactClientEntry = join(cwd, './node_modules/ssr-plugin-react/esm/entry/client-entry.js');
    const react18ServerEntry = join(cwd, './node_modules/ssr-plugin-react18/esm/entry/server-entry.js');
    const react18ClientEntry = join(cwd, './node_modules/ssr-plugin-react18/esm/entry/client-entry.js');
    const supportOptinalChaining = coerce(process.version).major >= 14;
    const define = (_a = userConfig.define) !== null && _a !== void 0 ? _a : {};
    userConfig.define && stringifyDefine(define);
    const alias = Object.assign({
        '@': getFeDir(),
        '~': getCwd(),
        '~/src': join(cwd, './src'),
        _build: join(cwd, './build')
    }, framework === 'ssr-plugin-react' ? {} : {
        vue$: framework === 'ssr-plugin-vue' ? 'vue/dist/vue.runtime.esm.js' : 'vue/dist/vue.runtime.esm-bundler.js'
    }, userConfig.alias);
    if (framework === 'ssr-plugin-vue3') {
        alias['@vue/server-renderer'] = '@vue/server-renderer/index.js';
    }
    const publicPath = ((_b = userConfig.publicPath) === null || _b === void 0 ? void 0 : _b.startsWith('http')) ? userConfig.publicPath : normalizeStartPath((_c = userConfig.publicPath) !== null && _c !== void 0 ? _c : '/');
    const devPublicPath = publicPath.startsWith('http') ? publicPath.replace(/^http(s)?:\/\/(.*)?\d/, '') : publicPath; // 本地开发不使用 http://localhost:3000 这样的 path 赋值给 webpack-dev-server 会很难处理
    const moduleFileExtensions = [
        '.web.mjs',
        '.mjs',
        '.web.js',
        '.js',
        '.web.ts',
        '.ts',
        '.web.tsx',
        '.tsx',
        '.json',
        '.web.jsx',
        '.jsx',
        '.vue',
        '.css'
    ];
    const isDev = (_d = userConfig.isDev) !== null && _d !== void 0 ? _d : process.env.NODE_ENV !== 'production';
    const fePort = (_e = userConfig.fePort) !== null && _e !== void 0 ? _e : 8999;
    const hmr = Object.assign({
        // host: '127.0.0.1',
        protocol: 'ws'
    }, userConfig.hmr);
    let https = userConfig.https ? userConfig.https : !!process.env.HTTPS;
    if (!((typeof https === 'boolean' && https) || (typeof https === 'object' && Object.keys(https).length !== 0))) {
        https = false;
    }
    const serverPort = process.env.SERVER_PORT ? Number(process.env.SERVER_PORT) : 3000;
    const host = (_f = hmr === null || hmr === void 0 ? void 0 : hmr.host) !== null && _f !== void 0 ? _f : '127.0.0.1';
    const chunkName = 'Page';
    const clientLogLevel = 'error';
    const useHash = !isDev; // 生产环境默认生成hash
    const defaultWhiteList = [/\.(css|less|sass|scss)$/, /vant.*?style/, /antd.*?(style)/, /ant-design-vue.*?(style)/, /store$/, /\.(vue)$/];
    const whiteList = defaultWhiteList.concat((_g = userConfig.whiteList) !== null && _g !== void 0 ? _g : []);
    const jsOrder = isVite ? [`${chunkName}.js`] : [`runtime~${chunkName}.js`, 'vendor.js', 'common-vendor.js', 'layout-app~vendor.js', `${chunkName}.js`, 'layout-app.js'];
    const cssOrder = ['vendor.css', 'common-vendor.css', 'layout-app~vendor.css', `${chunkName}.css`, 'layout-app.css'];
    const webpackStatsOption = {
        assets: true,
        cachedAssets: false,
        children: false,
        chunks: false,
        colors: true,
        modules: false,
        warnings: false,
        entrypoints: false
    };
    const dynamic = true;
    // ref https://www.babeljs.cn/docs/babel-preset-env#corejs
    const corejsVersion = checkModuleExist('core-js/package.json') ? coerce(require(loadModuleFromFramework('core-js/package.json')).version) : {};
    const { major, minor } = corejsVersion;
    const corejsOptions = userConfig.corejs ? {
        corejs: {
            version: `${major}.${minor}`,
            proposals: major === 3
        },
        targets: {
            chrome: '60',
            firefox: '60',
            ie: '9',
            safari: '10',
            edge: '17'
        },
        useBuiltIns: 'usage',
        shippedProposals: major === 2,
        ...userConfig.corejsOptions
    } : {};
    const writeDebounceTime = 2000;
    const webpackDevServerConfig = Object.assign({
        stats: webpackStatsOption,
        disableInfo: true,
        disableHostCheck: true,
        publicPath: devPublicPath,
        hotOnly: true,
        host,
        sockHost: host,
        sockPort: (_h = hmr === null || hmr === void 0 ? void 0 : hmr.port) !== null && _h !== void 0 ? _h : fePort,
        hot: true,
        port: (_j = hmr === null || hmr === void 0 ? void 0 : hmr.port) !== null && _j !== void 0 ? _j : fePort,
        https,
        clientLogLevel: clientLogLevel,
        headers: {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',
            'Access-Control-Allow-Headers': 'X-Requested-With, content-type, Authorization'
        }
    }, userConfig.webpackDevServerConfig);
    const chainBaseConfig = () => {
        // 覆盖默认webpack配置
    };
    const chainClientConfig = () => {
        // 覆盖默认 client webpack配置
    };
    const chainServerConfig = () => {
        // 覆盖默认 server webpack配置
    };
    const assetsDir = (_k = userConfig.assetsDir) !== null && _k !== void 0 ? _k : 'static';
    const manifestPath = `${normalizeEndPath(devPublicPath)}asset-manifest.json`;
    const staticPath = `${normalizeEndPath(devPublicPath)}${assetsDir}`;
    const hotUpdatePath = `${normalizeEndPath(devPublicPath)}*.hot-update**`;
    const proxyKey = [staticPath, hotUpdatePath, manifestPath];
    const prefix = '/';
    const dynamicFile = {
        serverBundle: join(cwd, `./build/server/${chunkName}.server.js`),
        assetManifest: join(cwd, './build/client/asset-manifest.json'),
        asyncChunkMap: join(cwd, './build/asyncChunkMap.json')
    };
    const babelExtraModule = [
        /ssr-plugin-vue3/, /ssr-client-utils/, /ssr-hoc-vue/, /vue/, /ssr-common-utils/, /ssr-plugin-vue/, /ssr-plugin-react/,
        /ssr-hoc-react/, /ssr-hoc-vue3/, /ssr-hoc-react18/
    ];
    const staticConfigPath = '';
    const getOutput = () => { };
    const rootId = '#app';
    const config = Object.assign({}, {
        chainBaseConfig,
        chainServerConfig,
        chainClientConfig,
        cwd,
        isDev,
        getOutput,
        publicPath,
        useHash,
        host,
        moduleFileExtensions,
        fePort,
        serverPort,
        chunkName,
        jsOrder,
        cssOrder,
        webpackStatsOption,
        dynamic,
        mode,
        stream,
        https,
        manifestPath,
        proxyKey,
        vue3ServerEntry,
        vue3ClientEntry,
        vueServerEntry,
        vueClientEntry,
        reactServerEntry,
        reactClientEntry,
        react18ServerEntry,
        react18ClientEntry,
        isVite,
        whiteList,
        isCI,
        supportOptinalChaining,
        define,
        prefix,
        optimize,
        writeDebounceTime,
        dynamicFile,
        babelExtraModule,
        rootId,
        staticConfigPath
    }, userConfig);
    config.staticConfigPath = join(config.cwd, './build/staticConfig.js');
    config.getOutput = () => ({
        clientOutPut: join(cwd, './build/client'),
        serverOutPut: join(cwd, './build/server')
    });
    config.assetsDir = assetsDir;
    config.alias = alias;
    config.prefix = normalizeStartPath((_l = config.prefix) !== null && _l !== void 0 ? _l : '/');
    config.corejsOptions = corejsOptions;
    config.whiteList = whiteList;
    config.hmr = hmr;
    config.webpackDevServerConfig = webpackDevServerConfig; // 防止把整个 webpackDevServerConfig 全量覆盖了
    config.babelOptions = userConfig.babelOptions ? {
        ...{
            babelHelpers: 'bundled',
            exclude: /node_modules|\.(css|less|sass)/,
            extensions: ['.ts', '.vue', '.tsx', '.js']
        },
        ...userConfig.babelOptions
    } : undefined;
    return config;
};
export { loadConfig };
//# sourceMappingURL=loadConfig.js.map