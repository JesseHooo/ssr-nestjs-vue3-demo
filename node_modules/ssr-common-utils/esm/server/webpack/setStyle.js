import { loadConfig } from '../loadConfig';
import { loadModuleFromFramework } from '../cwd';
const loadModule = loadModuleFromFramework;
const setStyle = (chain, reg, options) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const { css } = loadConfig();
    const { include, exclude, importLoaders, loader, isServer } = options;
    const userCssloaderOptions = (_b = (_a = css === null || css === void 0 ? void 0 : css().loaderOptions) === null || _a === void 0 ? void 0 : _a.cssOptions) !== null && _b !== void 0 ? _b : {};
    const defaultCssloaderOptions = {
        importLoaders: importLoaders,
        modules: {
            // 对 .module.xxx 的文件开启 css-modules
            auto: true
        },
        url: (url) => {
            // 绝对路径开头的静态资源地址不处理
            return !url.startsWith('/');
        }
    };
    const finalCssloaderOptions = Object.assign({}, defaultCssloaderOptions, userCssloaderOptions);
    const postCssPlugins = (_e = (_d = (_c = css === null || css === void 0 ? void 0 : css().loaderOptions) === null || _c === void 0 ? void 0 : _c.postcss) === null || _d === void 0 ? void 0 : _d.plugins) !== null && _e !== void 0 ? _e : []; // 用户自定义 postcss 插件
    const userPostcssOptions = (_g = (_f = css === null || css === void 0 ? void 0 : css().loaderOptions) === null || _f === void 0 ? void 0 : _f.postcss) === null || _g === void 0 ? void 0 : _g.options; // postCssOptions maybe function|object
    const postcssOptions = typeof userPostcssOptions === 'function' ? userPostcssOptions : Object.assign({
        plugins: [
            require(loadModule('postcss-flexbugs-fixes')),
            require(loadModule('postcss-discard-comments')),
            [require(loadModule('postcss-preset-env')), {
                    autoprefixer: {
                        flexbox: 'no-2009'
                    },
                    stage: 3
                }]
        ].concat(postCssPlugins)
    }, userPostcssOptions !== null && userPostcssOptions !== void 0 ? userPostcssOptions : {}); // 合并用户自定义 postcss options
    chain.module
        .rule(options.rule)
        .test(reg)
        .when(Boolean(include), rule => {
        include && rule.include.add(include).end();
    })
        .when(Boolean(exclude), rule => {
        exclude && rule.exclude.add(exclude).end();
    })
        .use('MiniCss')
        .loader(loadModule('ssr-mini-css-extract-plugin/dist/loader'))
        .options({
        emit: !isServer
    })
        .end()
        .use('css-loader')
        .loader(loadModule('css-loader'))
        .options(finalCssloaderOptions)
        .end()
        .use('postcss-loader')
        .loader(loadModule('postcss-loader'))
        .options({
        postcssOptions: postcssOptions
    })
        .end()
        .when(Boolean(loader), rule => {
        loader && rule.use(loader)
            .loader(loadModule(loader))
            .when(loader === 'less-loader', rule => {
            var _a;
            rule.options(Object.assign({
                lessOptions: {
                    javascriptEnabled: true
                }
            }, (_a = css === null || css === void 0 ? void 0 : css().loaderOptions) === null || _a === void 0 ? void 0 : _a.less));
        })
            .when(loader === 'sass-loader', rule => {
            var _a, _b;
            rule.options((_b = (_a = css === null || css === void 0 ? void 0 : css().loaderOptions) === null || _a === void 0 ? void 0 : _a.sass) !== null && _b !== void 0 ? _b : {});
        })
            .end();
    });
};
export { setStyle };
//# sourceMappingURL=setStyle.js.map