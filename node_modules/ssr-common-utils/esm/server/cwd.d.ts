/// <reference types="node" />
import { exec } from 'child_process';
import type { UserConfig, Json, SSRModule, PkgJson } from 'ssr-types';
import debug from 'debug';
export declare const ssrDebug: debug.Debugger;
declare const getCwd: () => string;
declare const getFeDir: () => string;
declare const getPagesDir: () => string;
declare const cleanOutClientDir: () => void;
declare const getPkgJson: () => PkgJson;
declare const writeRoutes: (routes: string, name?: string) => Promise<void>;
declare const getWebpackSplitCache: () => Record<string, {
    name: string;
    test: (module: SSRModule) => boolean | undefined;
    priority: number;
}> | {
    vendors: {
        test: (module: SSRModule) => false | "" | RegExpMatchArray | null | undefined;
        name: string;
    };
};
declare const checkContainsRev: (arr: string[], name: string) => boolean;
declare const getSplitChunksOptions: (asyncChunkMap: {
    val: Record<string, string[]>;
}) => {
    minSize: number;
    maxAsyncRequests: number;
    maxInitialRequests: number;
    chunks: string;
    name(module: SSRModule, chunks: any, cacheGroupKey: string): string;
    cacheGroups: Record<string, {
        name: string;
        test: (module: SSRModule) => boolean | undefined;
        priority: number;
    }> | {
        vendors: {
            test: (module: SSRModule) => false | "" | RegExpMatchArray | null | undefined;
            name: string;
        };
    };
};
declare const transformConfig: () => Promise<void>;
export declare const esbuildTransform: (from: string, to: string) => Promise<void>;
declare const transformManualRoutes: () => Promise<void>;
declare const getUserConfig: () => UserConfig;
export declare const getEnvConfig: () => UserConfig;
declare const cryptoAsyncChunkName: (chunks: Array<{
    name: string;
}>, asyncChunkMap: Record<string, string[]>) => string;
declare const isFaaS: (fun?: boolean) => Promise<boolean>;
export declare const checkRoute: ({ routeItem, path }: {
    routeItem?: {
        path: string;
    } | undefined;
    path: string;
}) => void;
declare const judgeFramework: () => string;
declare const judgeVersion: (version: string) => import("semver/classes/semver") | null;
declare const judgeServerFramework: () => "ssr-plugin-midway" | "ssr-plugin-nestjs";
export declare const debounce: (func: Function, wait: number) => () => void;
declare const checkModuleExist: (name: string) => boolean;
declare const loadModuleFromFramework: (path: string) => string;
declare const processError: (err: any) => void;
declare const accessFile: (file: string) => Promise<boolean>;
declare const accessFileSync: (file: string) => boolean;
export declare const getStaticConfig: () => Partial<import("ssr-types").IConfig>;
declare const execPromisify: typeof exec.__promisify__;
declare const stringifyDefine: (obj: {
    [key: string]: Json;
}) => void;
export declare const getViteServerEntry: () => string;
export declare const checkTsConfig: () => Promise<void>;
export { getCwd, getFeDir, getPagesDir, getUserConfig, isFaaS, processError, accessFile, execPromisify, cryptoAsyncChunkName, transformConfig, accessFileSync, judgeFramework, loadModuleFromFramework, transformManualRoutes, writeRoutes, stringifyDefine, judgeServerFramework, judgeVersion, getWebpackSplitCache, getSplitChunksOptions, cleanOutClientDir, checkContainsRev, getPkgJson, checkModuleExist };
//# sourceMappingURL=cwd.d.ts.map