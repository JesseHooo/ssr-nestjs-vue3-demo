export const normalizePath = (path, prefix) => {
    // 移除 prefix 保证 path 跟路由表能够正确匹配
    const res = normalizeStartPath(path.replace(prefix, ''));
    return res;
};
export const normalizeStartPath = (path) => {
    if (path.startsWith('//')) {
        path = path.replace('//', '/');
    }
    if (!path.startsWith('/')) {
        path = `/${path}`;
    }
    return path;
};
export const normalizeEndPath = (path) => {
    if (!path.endsWith('/')) {
        path = `${path}/`;
    }
    return path;
};
export const isMicro = () => {
    return !!(window.microApp);
};
export const combineRoutes = (declareRoutes, manualRoutes) => {
    const declareRoutesType = declareRoutes;
    const manualRoutesType = manualRoutes;
    const Routes = {
        ...declareRoutesType,
        ...manualRoutesType
    };
    if (manualRoutesType.FeRoutes) {
        // 声明式路由覆盖约定式路由同名path
        const combineRoutes = declareRoutesType.FeRoutes.map(route => { var _a; return (_a = manualRoutesType.FeRoutes.find(e => e.path === route.path)) !== null && _a !== void 0 ? _a : route; });
        manualRoutesType.FeRoutes.forEach(route => {
            // 补充声明式路由新增的配置
            const found = combineRoutes.find(e => e.path === route.path);
            if (!found) {
                combineRoutes.push(route);
            }
        });
        updateChildPath(combineRoutes, null);
        Routes.FeRoutes = combineRoutes;
    }
    return Routes;
};
const updateChildPath = (routes, parentpath) => {
    routes.forEach(route => {
        const { path } = route;
        if (parentpath) {
            route.childPath = path.startsWith('/') ? `${parentpath}${path}` : `${parentpath}/${path}`;
        }
        if (route.children) {
            updateChildPath(route.children, path);
        }
    });
};
//# sourceMappingURL=normalize.js.map